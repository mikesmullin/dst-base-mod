package dst;

import lua.Table;

@:native("_G")
extern class Constants
{
	public var PI: Float; // 3.14159
	public var DEGREES: Float; // PI/180
	public var RADIANS: Float; // 180/PI
	public var FRAMES: Float; // 1/30
	public var TILE_SCALE: Float; // 4

	public var RESOLUTION_X: Int; // 1280
	public var RESOLUTION_Y: Int; // 720

	public var MAX_FE_SCALE: Float; // 3 is default if you don't call SetMaxPropUpscale
	public var MAX_HUD_SCALE: Float; // 1.25

	public var NUM_CRAFTING_RECIPES: Int; // 10

	// push priorities
	public var STATIC_PRIORITY: Int; // 10000

	public var XBOX_CONTROLLER_ID: Int; // 17

	public var FADE_OUT: Bool; // false
	public var FADE_IN: Bool; // true


	// AUTOGENERATED CODE BY export_accountitems.lua
	// see full list of definitions in data\scripts\prefabskins.lua
	public var PREFAB_SKINS: Table<String, Table<Int, String>>;
	public var PREFAB_SKINS_IDS: Table<String, Table<Int, String>>;

	// see full list of definitions in data\scripts\clothing.lua
	public var CLOTHING: Table<String, Table<String, Dynamic>>;
	public var CLOTHING_SYMBOLS: Table<Int, String>;
	public var HIDE_SYMBOLS: Table<Int, String>;

	// see full list of definitions in data\scripts\misc_items.lua
	public var MISC_ITEMS: Table<Int, Dynamic>;

	// see full list of definitions in data\scripts\emote_items.lua
	public var EMOTE_ITEMS: Table<String, Table<String, Dynamic>>;

	public var MAXITEMSLOTS: Int; // 15
	public var MAX_VOTE_OPTIONS: Int; // 6
}

@:enum
abstract FACING(Int)
{
	var RIGHT = 0;
	var UP = 1;
	var LEFT = 2;
	var DOWN = 3;
	var UPRIGHT = 4;
	var UPLEFT = 5;
	var DOWNRIGHT = 6;
	var DOWNLEFT = 7;
	var NONE = 8;
}

@:enum
abstract LAYER(Int)
{
	var BACKGROUND = 1;
	var WORLD_BACKGROUND = 2;
	var WORLD = 3;
	var WORLD_CEILING = 4;
	var FRONTEND = 6;
}

@:enum
abstract ANCHOR(Int)
{
	var MIDDLE = 0;
	var LEFT = 1;
	var RIGHT = 2;
	var TOP = 1;
	var BOTTOM = 2;
}

@:enum
abstract SCALEMODE(Int)
{
	var NONE = 0;
	var FILLSCREEN = 1;
	var PROPORTIONAL = 2;
	var FIXEDPROPORTIONAL = 3;
	var FIXEDSCREEN_NONDYNAMIC = 4;
}

@:enum
abstract PHYSICS_TYPE(Int)
{
	var ANIMATION_CONTROLLED = 0;
	var PHYSICS_CONTROLLED = 1;
}

@:enum
abstract MOVE(Int)
{
	var UP = 1;
	var DOWN = 2;
	var LEFT = 3;
	var RIGHT = 4;
}

// Controls:
// Matches STRINGS.UI.CONTROLSSCREEN.CONTROLS
@:enum
abstract CONTROL(Int)
{
	// player action controls
	var PRIMARY = 0;
	var SECONDARY = 1;
	var ATTACK = 2;
	var INSPECT = 3;
	var ACTION = 4;

	// player movement controls
	var MOVE_UP = 5; // left joystick up
	var MOVE_DOWN = 6; // left joystick down
	var MOVE_LEFT = 7; // left joystick left
	var MOVE_RIGHT = 8; // left joystick right

	// view controls
	var ZOOM_IN = 9; // left trigger
	var ZOOM_OUT = 10; // right trigger
	var ROTATE_LEFT = 11; // left shoulder
	var ROTATE_RIGHT = 12; // right shoulder


	// player movement controls
	var PAUSE = 13;  // start
	var MAP = 14; 
	var INV_1 = 15;
	var INV_2 = 16;
	var INV_3 = 17;
	var INV_4 = 18;
	var INV_5 = 19;
	var INV_6 = 20;
	var INV_7 = 21;
	var INV_8 = 22;
	var INV_9 = 23;
	var INV_10 = 24;

	var FOCUS_UP = 25; // d-pad up
	var FOCUS_DOWN = 26; // d-pad down
	var FOCUS_LEFT = 27; // d-pad left
	var FOCUS_RIGHT = 28; // d-pad right

	var ACCEPT = 29; // A
	var CANCEL = 30; // B
	var SCROLLBACK = 31; // left shoulder
	var SCROLLFWD = 32; // right shoulder

	var PREVVALUE = 33;
	var NEXTVALUE = 34;

	var SPLITSTACK = 35;
	var TRADEITEM = 36;
	var TRADESTACK = 37;
	var FORCE_INSPECT = 38;
	var FORCE_ATTACK = 39;
	var FORCE_TRADE = 40;
	var FORCE_STACK = 41;

	var OPEN_DEBUG_CONSOLE = 42;
	var TOGGLE_LOG = 43;
	var TOGGLE_DEBUGRENDER = 44;

	var OPEN_INVENTORY = 45;  // right trigger
	var OPEN_CRAFTING = 46;   // left trigger
	var INVENTORY_LEFT = 47; // right joystick left
	var INVENTORY_RIGHT = 48; // right joystick right
	var INVENTORY_UP = 49; //  right joystick up
	var INVENTORY_DOWN = 50; // right joystick down
	var INVENTORY_EXAMINE = 51; // d-pad up
	var INVENTORY_USEONSELF = 52; // d-pad right
	var INVENTORY_USEONSCENE = 53; // d-pad left
	var INVENTORY_DROP = 54; // d-pad down
	var PUTSTACK = 55;
	var CONTROLLER_ATTACK = 56; // X on xbox controller
	var CONTROLLER_ACTION = 57; // A
	var CONTROLLER_ALTACTION = 58; // B
	var USE_ITEM_ON_ITEM = 59; 

	var MAP_ZOOM_IN = 60;
	var MAP_ZOOM_OUT = 61;

	var OPEN_DEBUG_MENU = 62;

	var TOGGLE_SAY = 63;
	var TOGGLE_WHISPER = 64;
	var TOGGLE_SLASH_COMMAND = 65;
	var TOGGLE_PLAYER_STATUS = 66;
	var SHOW_PLAYER_STATUS = 67;

	var MENU_MISC_1 = 68; // X
	var MENU_MISC_2 = 69; // Y
	var MENU_MISC_3 = 70; // L
	var MENU_MISC_4 = 71; // R

	var INSPECT_SELF = 72; // Keyboard self inspect [I]

	var CUSTOM_START = 100;
}

@:enum
abstract KEY(Int)
{
	var TAB = 9;
	var KP_PERIOD = 266;
	var KP_DIVIDE = 267;
	var KP_MULTIPLY = 268;
	var KP_MINUS = 269;
	var KP_PLUS = 270;
	var KP_ENTER = 271;
	var KP_EQUALS = 272;
	var MINUS = 45;
	var EQUALS = 61;
	var SPACE = 32;
	var ENTER = 13;
	var ESCAPE = 27;
	var HOME = 278;
	var INSERT = 277;
	var DELETE = 127;
	var END = 279;
	var PAUSE = 19;
	var PRINT = 316;
	var CAPSLOCK = 301;
	var SCROLLOCK = 302;
	var RSHIFT = 303; // use SHIFT instead
	var LSHIFT = 304; // use SHIFT instead
	var RCTRL = 305; // use CTRL instead
	var LCTRL = 306; // use CTRL instead
	var RALT = 307; // use ALT instead
	var LALT = 308; // use ALT instead
	var LSUPER = 311;
	var RSUPER = 312;
	var ALT = 400;
	var CTRL = 401;
	var SHIFT = 402;
	var BACKSPACE = 8;
	var PERIOD = 46;
	var SLASH = 47;
	var LEFTBRACKET = 91;
	var BACKSLASH = 92;
	var RIGHTBRACKET = 93;
	var TILDE = 96;
	var A = 97;
	var B = 98;
	var C = 99;
	var D = 100;
	var E = 101;
	var F = 102;
	var G = 103;
	var H = 104;
	var I = 105;
	var J = 106;
	var K = 107;
	var L = 108;
	var M = 109;
	var N = 110;
	var O = 111;
	var P = 112;
	var Q = 113;
	var R = 114;
	var S = 115;
	var T = 116;
	var U = 117;
	var V = 118;
	var W = 119;
	var X = 120;
	var Y = 121;
	var Z = 122;
	var F1 = 282;
	var F2 = 283;
	var F3 = 284;
	var F4 = 285;
	var F5 = 286;
	var F6 = 287;
	var F7 = 288;
	var F8 = 289;
	var F9 = 290;
	var F10 = 291;
	var F11 = 292;
	var F12 = 293;

	var UP = 273;
	var DOWN = 274;
	var RIGHT = 275;
	var LEFT = 276;
	var PAGEUP = 280;
	var PAGEDOWN = 281;

	var ZERO = 48;
	var ONE = 49;
	var TWO = 50;
	var THREE = 51;
	var FOUR = 52;
	var FIVE = 53;
	var SIX = 54;
	var SEVEN = 55;
	var EIGHT = 56;
	var NINE = 57;
}

@:enum
abstract MOUSEBUTTON(Int)
{
	// DO NOT use these for gameplay!
	var LEFT = 1000;
	var RIGHT = 1001;
	var MIDDLE = 1002;
	var SCROLLUP = 1003;
	var SCROLLDOWN = 1004;
}

@:enum
abstract GESTURE(Int)
{
	var ZOOM_IN = 900;
	var ZOOM_OUT = 901;
	var ROTATE_LEFT = 902;
	var ROTATE_RIGHT = 903;
	var MAX = 904;
}

@:enum
abstract BACKEND_PREFABS(String)
{
	var hud = "hud";
	var forest = "forest";
	var cave = "cave";
	var fire = "fire";
	var character_fire = "character_fire";
	var shatter = "shatter";
}

@:enum
abstract FRONTEND_PREFABS(String)
{
	var frontend = "frontend";
}

@:enum
abstract RECIPE_PREFABS(String)
{
}

// DynamicLegacy table, not for DST
@:enum
abstract MAIN_CHARACTERLIST(String)
{
	var wilson = "wilson";
	var willow = "willow";
	var wolfgang = "wolfgang";
	var wendy = "wendy";
	var wx78 = "wx78";
	var wickerbottom = "wickerbottom";
	var woodie = "woodie";
	var wes = "wes";
	var waxwell = "waxwell";
}

// DynamicLegacy table, not for DST
@:enum
abstract ROG_CHARACTERLIST(String)
{
	var wathgrithr = "wathgrithr";
	var webber = "webber";
}

@:enum
abstract DST_CHARACTERLIST(String)
{
	var wilson = "wilson";
	var willow = "willow";
	var wolfgang = "wolfgang";
	var wendy = "wendy";
	var wx78 = "wx78";
	var wickerbottom = "wickerbottom";
	var woodie = "woodie";
	var wes = "wes";
	var waxwell = "waxwell";
	var wathgrithr = "wathgrithr";
	var webber = "webber";
}





// MAINSCREEN_TOOL_LIST = 
// {
// 	"swap_axe", "swap_spear", "swap_pickaxe", "swap_shovel", "swap_staffs", "swap_cane", "swap_fishingrod", "swap_hammer", "swap_batbat", "swap_ham_bat",
// }


// MAINSCREEN_TORSO_LIST = 
// {
// 	"", "", "", "", "armor_wood", "armor_sweatervest", "torso_amulets", "armor_trunkvest_winter", "armor_ruins", "torso_dragonfly", "torso_hawaiian"
// }


// MAINSCREEN_HAT_LIST = 
// {
// 	"", "", "", "", "hat_top", "hat_beefalo", "hat_football", "hat_winter", "hat_spider", "hat_catcoon", "hat_mole", "hat_ice", "hat_watermelon"
// }


// MODCHARACTERLIST = 
// {
// 	// this gets populated by mods
// }

// MODCHARACTEREXCEPTIONS_DST = 
// {
// 	// this also gets populated by mods
// }

// CHARACTER_GENDERS = 
// {
// 	FEMALE = {
// 		"willow",
// 		"wendy",
// 		"wickerbottom",
// 		"wathgrithr",
// 	},
// 	MALE = {
// 		"wilson",
// 		"woodie",
// 		"waxwell",
// 		"wolfgang",
// 		"wes",
// 		"webber",
// 	},
// 	ROBOT = {
// 		"wx78",
// 		"pyro",
// 	},
// 	NEUTRAL = {}, //empty, for modders to add to
// 	PLURAL = {}, //empty, for modders to add to
// }


// EQUIPSLOTS =
// {
//     HANDS = "hands",
//     HEAD = "head",
//     BODY = "body",
// }

// ITEMTAG=
// {
//     FOOD = "food",
//     MEAT = "meat",
//     WEAPON = "weapon",
//     TOOL = "tool",
//     TREASURE = "treasure",
//     FUEL = "fuel",
//     FIRE = "fire",
//     STACKABLE = "stackable",
//     FX = "FX",
// }

// // See map_painter.h
// GROUND =
// {
// 	INVALID = 255,
// 	IMPASSABLE = 1,
// 	ROAD = 2,
// 	ROCKY = 3,
// 	DIRT = 4,
// 	SAVANNA = 5,
// 	GRASS = 6,
// 	FOREST = 7,
// 	MARSH = 8,
// 	WEB = 9,
// 	WOODFLOOR = 10,
// 	CARPET = 11,
// 	CHECKER = 12,

// 	// CAVES
// 	CAVE = 13,
// 	FUNGUS = 14,
// 	SINKHOLE = 15,
// 	UNDERROCK = 16,
// 	MUD = 17,
// 	BRICK = 18,
// 	BRICK_GLOW = 19,
// 	TILES = 20,
// 	TILES_GLOW = 21,
// 	TRIM = 22,
// 	TRIM_GLOW = 23,
// 	FUNGUSRED = 24,
// 	FUNGUSGREEN = 25,

// 	//EXPANDED FLOOR TILES
// 	DECIDUOUS = 30,
// 	DESERT_DIRT = 31,
// 	SCALE = 32,

// 	//NOISE
// 	DIRT_NOISE = 123,
// 	ABYSS_NOISE = 124,
// 	GROUND_NOISE = 125,
// 	CAVE_NOISE = 126,
// 	FUNGUS_NOISE = 127,

// 	UNDERGROUND = 128,
	
// 	WALL_ROCKY = 151,
// 	WALL_DIRT = 152,
// 	WALL_MARSH = 153,
// 	WALL_CAVE = 154,
// 	WALL_FUNGUS = 155,
// 	WALL_SINKHOLE = 156,
// 	WALL_MUD = 157,
// 	WALL_TOP = 158,
// 	WALL_WOOD = 159,
// 	WALL_HUNESTONE = 160,
// 	WALL_HUNESTONE_GLOW = 161,
// 	WALL_STONEEYE = 162,
// 	WALL_STONEEYE_GLOW = 163,

// 	FAKE_GROUND = 200,

// //	STILL_WATER_SHALLOW = 130,
// //	STILL_WATER_DEEP = 131,
// //	MOVING_WATER_SHALLOW = 132,
// //	MOVING_WATER_DEEP = 133,
// //	SALT_WATER_SHALLOW = 134,
// //	SALT_WATER_DEEP = 135,
// }

// SPECIAL_EVENTS =
// {
//     NONE = "none",
//     HALLOWED_NIGHTS = "hallowed_nights",
//     WINTERS_FEAST = "winters_feast",
//     YOTG = "year_of_the_gobbler",
// }
// WORLD_SPECIAL_EVENT = SPECIAL_EVENTS.NONE

// //Used in preloadsounds.lua
// ////////////////////////////////////////////////////////-
// // Reminder: update asset dependencies in frontend.lua //
// ////////////////////////////////////////////////////////-
// SPECIAL_EVENT_MUSIC =
// {
//     //winter's feast carol
//     [SPECIAL_EVENTS.WINTERS_FEAST] =
//     {
//         bank = "music_frontend_winters_feast.fsb",
//         sound = "dontstarve/music/music_FE_WF",
//     },

//     //year of the gobbler
//     [SPECIAL_EVENTS.YOTG] =
//     {
//         bank = "music_frontend_yotg.fsb",
//         sound = "dontstarve/music/music_FE_yotg",
//     },
// }

// function IsSpecialEventActive(event)
//     return WORLD_SPECIAL_EVENT == event
// end

// //default:
// //  bank = "music_frontend.fsb"
// //  sound = "dontstarve/music/music_FE"
// FE_MUSIC =
//     SPECIAL_EVENT_MUSIC[WORLD_SPECIAL_EVENT] ~= nil and
//     SPECIAL_EVENT_MUSIC[WORLD_SPECIAL_EVENT].sound or
//     "dontstarve/music/music_FE"

// NUM_HALLOWEENCANDY = 11
// NUM_WINTERFOOD = 9

// TECH =
// {
//     NONE = TechTree.Create(),

//     SCIENCE_ONE = { SCIENCE = 1 },
//     SCIENCE_TWO = { SCIENCE = 2 },
//     SCIENCE_THREE = { SCIENCE = 3 },
//     // Magic starts at level 2 so it's not teased from the start.
//     MAGIC_TWO = { MAGIC = 2 },
//     MAGIC_THREE = { MAGIC = 3 },

//     ANCIENT_TWO = { ANCIENT = 2 },
//     ANCIENT_THREE = { ANCIENT = 3 },
//     ANCIENT_FOUR = { ANCIENT = 4 },

//     SHADOW_TWO = { SHADOW = 3 },

//     CARTOGRAPHY_TWO = { CARTOGRAPHY = 2 },

//     SCULPTING_ONE = { SCULPTING = 1 },
//     SCULPTING_TWO = { SCULPTING = 2 },

//     ORPHANAGE_ONE = { ORPHANAGE = 1 },
//     PERDOFFERING_ONE = { PERDOFFERING = 1 },

//     HALLOWED_NIGHTS = { SCIENCE = 10 }, // ApplySpecialEvent() will change this from lost to 0
//     WINTERS_FEAST = { SCIENCE = 10 }, // ApplySpecialEvent() will change this from lost to 0
//     YOTG = { SCIENCE = 10 }, // ApplySpecialEvent() will change this from lost to 0

//     LOST = { MAGIC = 10, SCIENCE = 10, ANCIENT = 10 },
// }

// // See cell_data.h
// NODE_TYPE =
// {
//     Default = 0,
//     Blank = 1,
//     Background = 2,
//     Random = 3,
//     Blocker = 4,
//     Room = 5,
//     BackgroundRoom = 6,
// }

// // See cell_data.h
// NODE_INTERNAL_CONNECTION_TYPE =
// {
//     EdgeCentroid = 0,
//     EdgeSite = 1,
//     EdgeEdgeDirect = 2,
//     EdgeEdgeLeft = 3,
//     EdgeEdgeRight = 4,
//     EdgeData = 5,
// }

// CA_SEED_MODE =
// {
//     SEED_RANDOM = 0,
//     SEED_CENTROID = 1,
//     SEED_SITE = 2,
//     SEED_WALLS = 3,
// }

// // See maze.h
// MAZE_TYPE =
// {
//     MAZE_DFS_4WAY_META = 0,
//     MAZE_DFS_4WAY = 1,
//     MAZE_DFS_8WAY = 2,
//     MAZE_GROWINGTREE_4WAY = 3,
//     MAZE_GROWINGTREE_8WAY = 4,
//     MAZE_GROWINGTREE_4WAY_INV = 5,
// }

// // NORTH	1
// // EAST		2
// // SOUTH	4
// // WEST		8
// //[[
// Meta maze def:
// 5 room types:
// 4 way,	3 way,	2 way,	1 way,	L shape
// 	1,		4,		2,		4,		4
// 	15 tiles needed
// //]]

// MAZE_CELL_EXITS =
// {
// 	NO_EXITS = 		0, // Dont place a cell here.
// 	SINGLE_NORTH = 	1,
// 	SINGLE_EAST = 	2,
// 	L_NORTH = 		3,
// 	SINGLE_SOUTH = 	4,
// 	TUNNEL_NS = 	5,
// 	L_EAST = 		6,
// 	THREE_WAY_N = 	7,
// 	SINGLE_WEST = 	8,
// 	L_WEST = 		9,
// 	TUNNEL_EW =		10,
// 	THREE_WAY_W = 	11,
// 	L_SOUTH = 		12,
// 	THREE_WAY_S = 	13,
// 	THREE_WAY_E = 	14,
// 	FOUR_WAY = 		15,
// }

// MAZE_CELL_EXITS_INV =
// {
// 	"SINGLE_NORTH",
// 	"SINGLE_EAST",
// 	"L_NORTH",
// 	"SINGLE_SOUTH",
// 	"TUNNEL_NS",
// 	"L_EAST",
// 	"THREE_WAY_N",
// 	"SINGLE_WEST",
// 	"L_WEST",
// 	"TUNNEL_EW",
// 	"THREE_WAY_W",
// 	"L_SOUTH" ,
// 	"THREE_WAY_S",
// 	"THREE_WAY_E",
// 	"FOUR_WAY",
// }

// LAYOUT =
// {
// 	STATIC = 0,
// 	CIRCLE_EDGE = 1,
// 	CIRCLE_RANDOM = 2,
// 	GRID = 3,
// 	RECTANGLE_EDGE = 4,
// 	CIRCLE_FILLED = 5,
// }

// LAYOUT_POSITION =
// {
// 	RANDOM = 0,
// 	CENTER = 1,
// }

// LAYOUT_ROTATION =
// {
// 	NORTH = 0, 	// 0 Degrees
// 	EAST = 1, 	// 90 Degrees
// 	SOUTH = 2, 	// 180 Degrees
// 	WEST = 3, 	// 270 Degrees
// }

// PLACE_MASK = 
// {
// 	NORMAL = 0,
// 	IGNORE_IMPASSABLE = 1,
// 	IGNORE_BARREN = 2,
// 	IGNORE_IMPASSABLE_BARREN = 3,
// 	IGNORE_RESERVED = 4,
// 	IGNORE_IMPASSABLE_RESERVED = 5,
// 	IGNORE_BARREN_RESERVED = 6,
// 	IGNORE_IMPASSABLE_BARREN_RESERVED = 7,
// }

// COLLISION =
// {

//     GROUND = 64, // See BpWorld.cpp (ocean walls)
//     LIMITS = 128,
//     WORLD = 192, //limits and ground
//     ITEMS = 256,
//     OBSTACLES = 512,
//     CHARACTERS = 1024,
//     FLYERS = 2048,
//     SANITY = 4096,
//     SMALLOBSTACLES = 8192,	// collide with characters but not giants
//     GIANTS = 16384,	// collide with obstacles but not small obstacles
// }

// BLENDMODE =
// {
// 	Disabled = 0,
// 	AlphaBlended = 1,
// 	Additive = 2,
// 	Premultiplied = 3,
// 	InverseAlpha = 4,
// 	AlphaAdditive = 5,
// 	VFXTest = 6,
// }

// ANIM_ORIENTATION =
// {
// 	Default = 0,
// 	OnGround = 1,
// }

// RECIPETABS =
// {
//     TOOLS =         { str = "TOOLS",        sort = 0,   icon = "tab_tool.tex" },
//     LIGHT =         { str = "LIGHT",        sort = 1,   icon = "tab_light.tex" },
//     SURVIVAL =      { str = "SURVIVAL",     sort = 2,   icon = "tab_trap.tex" },
//     FARM =          { str = "FARM",         sort = 3,   icon = "tab_farm.tex" },
//     SCIENCE =       { str = "SCIENCE",      sort = 4,   icon = "tab_science.tex" },
//     WAR =           { str = "WAR",          sort = 5,   icon = "tab_fight.tex" },
//     TOWN =          { str = "TOWN",         sort = 6,   icon = "tab_build.tex" },
//     REFINE =        { str = "REFINE",       sort = 7,   icon = "tab_refine.tex" },
//     MAGIC =         { str = "MAGIC",        sort = 8,   icon = "tab_arcane.tex" },
//     DRESS =         { str = "DRESS",        sort = 9,   icon = "tab_dress.tex" },

//     //Crafting stations
//     ANCIENT =       { str = "ANCIENT",      sort = 10,  icon = "tab_crafting_table.tex",    crafting_station = true },
//     CARTOGRAPHY =   { str = "CARTOGRAPHY",  sort = 10,  icon = "tab_cartography.tex",       crafting_station = true },
//     SCULPTING =     { str = "SCULPTING",    sort = 10,  icon = "tab_sculpt.tex",            crafting_station = true },
//     ORPHANAGE =     { str = "ORPHANAGE",    sort = 10,  icon = "tab_orphanage.tex",         crafting_station = true },
//     PERDOFFERING =  { str = "PERDOFFERING", sort = 10,  icon = "tab_perd_offering.tex",     crafting_station = true },
// }

// CUSTOM_RECIPETABS =
// {
//     BOOKS =         { str = "BOOKS",        sort = 999, icon = "tab_book.tex",      owner_tag = "bookbuilder" },
//     SHADOW =        { str = "SHADOW",       sort = 999, icon = "tab_shadow.tex",    owner_tag = "shadowmagic" },
// }

// VERBOSITY =
// {
// 	ERROR = 0,
// 	WARNING = 1,
// 	INFO = 2,
// 	DEBUG = 3,
// }

// RENDERPASS =
// {
// 	Z = 0,
// 	BLOOM = 1,
// 	DEFAULT = 2,
// }

// NUM_TRINKETS = 37

// SEASONS =
// {
// 	AUTUMN = "autumn",
// 	WINTER = "winter",
// 	SPRING = "spring",
// 	SUMMER = "summer",
// 	CAVES = "caves",
// }

// RENDER_QUALITY =
// {
// 	LOW = 0,
// 	DEFAULT = 1,
// 	HIGH = 2,
// }

// ROAD_PARAMETERS =
// {
// 	NUM_SUBDIVISIONS_PER_SEGMENT = 50,
// 	MIN_WIDTH = 2,
// 	MAX_WIDTH = 3,
// 	MIN_EDGE_WIDTH = 0.5,
// 	MAX_EDGE_WIDTH = 1,
// 	WIDTH_JITTER_SCALE=1,
// }

// local function RGB(r, g, b)
//     return { r / 255, g / 255, b / 255, 1 }
// end

// BGCOLOURS =
// {
// 	RED =          RGB(255, 89,  46 ),
// 	PURPLE =       RGB(184, 87,  198),
// 	YELLOW =       RGB(255, 196, 45 ),
// 	GREY =         RGB(75,  75,  75 ),
// 	HALF =         RGB(128, 128, 128 ),
// 	FULL =         RGB(255, 255, 255),
// }

// PLAYERCOLOURS =
// {
// 	BLUE =          RGB(149, 191, 242),
// 	//RED =           RGB(242, 99,  99 ), //RED redefined below
// 	YELLOW =        RGB(222, 222, 99 ),
// 	GREEN =         RGB(59,  222, 99 ),
// 	CORAL =         RGB(216, 60,  84 ),
// 	GRASS =         RGB(129, 168, 99 ),
// 	TEAL =          RGB(150, 206, 169),
// 	LAVENDER =      RGB(206, 145, 192),
// 	OTHERBLUE =     RGB(113, 125, 194),
// 	OTHERYELLOW =   RGB(205, 191, 121),
// 	FUSCHIA =       RGB(170, 85,  129),
// 	OTHERTEAL =     RGB(150, 201, 206),
// 	LIGHTORANGE =   RGB(206, 150, 100),
// 	ORANGE =        RGB(208, 120, 86 ),
// 	PURPLE =        RGB(125, 81,  156),

//     //Colour theme to better match the world tones
//     TOMATO =        RGB(205, 79,  57 ),
//     TAN =           RGB(255, 165, 79 ),
//     PLUM =          RGB(205, 150, 205),
//     BURLYWOOD =     RGB(205, 170, 125),
//     RED =           RGB(238, 99,  99 ),
//     PERU =          RGB(205, 133, 63 ),
//     DARKPLUM =      RGB(139, 102, 139),
//     EGGSHELL =      RGB(252, 230, 201),
//     SALMON =        RGB(255, 140, 105),
//     CHOCOLATE =     RGB(255, 127, 36 ),
//     VIOLETRED =     RGB(139, 71,  93 ),
//     SANDYBROWN =    RGB(244, 164, 96 ),
//     BROWN =         RGB(165, 42,  42 ),
//     BISQUE =        RGB(205, 183, 158),
//     PALEVIOLETRED = RGB(255, 130, 171),
//     GOLDENROD =     RGB(255, 193, 37 ),
//     ROSYBROWN =     RGB(255, 193, 193),
//     LIGHTTHISTLE =  RGB(255, 225, 255),
//     PINK =          RGB(255, 192, 203),
//     LEMON =         RGB(255, 250, 205),
//     FIREBRICK =     RGB(238, 44,  44 ),
//     LIGHTGOLD =     RGB(255, 236, 139),
//     MEDIUMPURPLE =  RGB(171, 130, 255),
//     THISTLE =       RGB(205, 181, 205),
// }
// DEFAULT_PLAYER_COLOUR = RGB(153, 153, 153) // GREY

// SAY_COLOR =         RGB(255, 255, 255)
// WHISPER_COLOR =     RGB(153, 153, 153)
// TWITCH_COLOR  =     RGB(153, 153, 255)

// WET_TEXT_COLOUR = RGB(149, 191, 242)
// NORMAL_TEXT_COLOUR = RGB(255, 255, 255)

// FRONTEND_PORTAL_COLOUR = {245/255, 232/255, 204/255, 255/255}
// //FRONTEND_TREE_COLOUR = {208/255, 196/255, 187/255, 255/255} //V2C: baked into the art now
// FRONTEND_CHARACTER_CLOSE_COLOUR = {235/255, 225/255, 212/255, 255/255}
// FRONTEND_CHARACTER_FAR_COLOUR = {225/255, 216/255, 206/255, 255/255}
// FRONTEND_SMOKE_COLOUR = {245/255, 232/255, 204/255, 153/255}
// FRONTEND_TITLE_COLOUR = {235/255, 225/255, 212/255, 255/255}
// PORTAL_TEXT_COLOUR = {243/255, 244/255, 243/255, 255/255}
// FADE_WHITE_COLOUR = {237/255, 224/255, 189/255, 255/255}

// ANNOUNCEMENT_ICONS =
// {
//     ["default"] =           { atlas = "images/button_icons.xml", texture = "announcement.tex" },
//     ["afk_start"] =         { atlas = "images/button_icons.xml", texture = "AFKstart.tex" },
//     ["afk_stop"] =          { atlas = "images/button_icons.xml", texture = "AFKstop.tex" },
//     ["death"] =             { atlas = "images/button_icons.xml", texture = "death.tex" },
//     ["resurrect"] =         { atlas = "images/button_icons.xml", texture = "resurrect.tex" },
//     ["join_game"] =         { atlas = "images/button_icons.xml", texture = "join.tex" },
//     ["leave_game"] =        { atlas = "images/button_icons.xml", texture = "leave.tex" },
//     ["kicked_from_game"] =  { atlas = "images/button_icons.xml", texture = "kicked.tex" },
//     ["banned_from_game"] =  { atlas = "images/button_icons.xml", texture = "banned.tex" },
//     ["item_drop"] =         { atlas = "images/button_icons.xml", texture = "item_drop.tex" },
//     ["vote"] =              { atlas = "images/button_icons.xml", texture = "vote.tex" },
//     ["dice_roll"] =         { atlas = "images/button_icons.xml", texture = "diceroll.tex" },
//     ["mod"] =               { atlas = "images/button_icons.xml", texture = "mod_announcement.tex" },
// }

// ROAD_STRIPS = 
// {
// 	CORNERS = 0,
// 	ENDS = 1,
// 	EDGES = 2,
// 	CENTER = 3,
// }

// WRAP_MODE = 
// {
// 	WRAP = 0,
// 	CLAMP = 1,
// 	MIRROR = 2,
// 	CLAMP_TO_EDGE = 3,
// }

// RESET_ACTION =
// {
// 	LOAD_FRONTEND = 0,
// 	LOAD_SLOT = 1,
// 	LOAD_FILE = 2,
// 	DO_DEMO = 3,
//     JOIN_SERVER = 4
// }

// HUD_ATLAS = "images/hud.xml"
// UI_ATLAS = "images/ui.xml"

// SNOW_THRESH = .015

// VIBRATION_CAMERA_SHAKE = 0
// VIBRATION_BLOOD_FLASH = 1
// VIBRATION_BLOOD_OVER = 2

// //V2C: NUM_DST_SAVE_SLOTS is totally redundant...
// //     Not sure why it was added, but keeping it around in case mods are using it
// //     SaveGameIndex:GetNumSlots() for ALL save data, e.g. maintain session cache
// //     Use NUM_SAVE_SLOTS for logic on ONLY accessible save data, e.g. FE screens
// NUM_SAVE_SLOTS = 5
// NUM_DST_SAVE_SLOTS = NUM_SAVE_SLOTS

// SAVELOAD = 
// {    
//     OPERATION = 
//     {
//         PREPARE = 0,
//         LOAD = 1,
//         SAVE = 2,
//         DELETE = 3,
//         NONE = 4,
//     },
    
//     STATUS = 
//     {
//         OK = 0,
//         DAMAGED = 1,
//         NOT_FOUND = 2,
//         NO_SPACE = 3,
//         FAILED = 4,
//     },
// }

// //Extended for DST

// MATERIALS =
// {
//     WOOD = "wood",
//     STONE = "stone",
//     HAY = "hay",
//     THULECITE = "thulecite",
//     GEM = "gem",
//     GEARS = "gears",
//     MOONROCK = "moonrock",
//     ICE = "ice",
//     SCULPTURE = "sculpture",
//     FOSSIL = "fossil",
// }

// UPGRADETYPES =
// {
//     DEFAULT = "default",
//     SPIDER = "spider",
// }

// LOCKTYPE =
// {
//     DOOR = "door",
//     MAXWELL = "maxwell",
// }

// FUELTYPE =
// {
//     BURNABLE = "BURNABLE",
//     USAGE = "USAGE",
//     MAGIC = "MAGIC",
//     CAVE = "CAVE",
//     NIGHTMARE = "NIGHTMARE",
//     ONEMANBAND = "ONEMANBAND",
//     PIGTORCH = "PIGTORCH",
//     CHEMICAL = "CHEMICAL",
//     WORMLIGHT = "WORMLIGHT",
// }

// OCCUPANTTYPE =
// {
//     BIRD = "bird",
// }

// FOODTYPE =
// {
//     GENERIC = "GENERIC",
//     MEAT = "MEAT",
//     WOOD = "WOOD",
//     VEGGIE = "VEGGIE",
//     ELEMENTAL = "ELEMENTAL",
//     GEARS = "GEARS",
//     HORRIBLE = "HORRIBLE",
//     INSECT = "INSECT",
//     SEEDS = "SEEDS",
//     BERRY = "BERRY", //hack for smallbird; berries are actually part of veggie
//     RAW = "RAW", // things which some animals can eat off the ground, but players need to cook
//     BURNT = "BURNT", //For lavae.
//     ROUGHAGE = "ROUGHAGE",
//     GOODIES = "GOODIES",
// }

// FOODGROUP =
// {
//     OMNI =
//     {
//         name = "OMNI",
//         types =
//         {
//             FOODTYPE.MEAT,
//             FOODTYPE.VEGGIE,
//             FOODTYPE.INSECT,
//             FOODTYPE.SEEDS,
//             FOODTYPE.GENERIC,
//             FOODTYPE.GOODIES,
//         },
//     },
//     WOODIE =
//     {
//         name = "WOODIE",
//         types =
//         {
//             FOODTYPE.MEAT,
//             FOODTYPE.VEGGIE,
//             FOODTYPE.INSECT,
//             FOODTYPE.SEEDS,
//             FOODTYPE.GENERIC,
//             FOODTYPE.WOOD,
//             FOODTYPE.ROUGHAGE,
//             FOODTYPE.GOODIES,
//         },
//     },
//     BERRIES_AND_SEEDS =
//     {
//         name = "BERRIES_AND_SEEDS",
//         types =
//         {
//             FOODTYPE.SEEDS,
//             FOODTYPE.BERRY,
//         },
//     },
//     BEARGER =
//     {
//         name = "BEARGER",
//         types =
//         {
//             FOODTYPE.MEAT,
//             FOODTYPE.VEGGIE,
//             FOODTYPE.BERRY,
//             FOODTYPE.GENERIC,
//         },
//     },
//     MOOSE =
//     {
//         name = "MOOSE",
//         types =
//         {
//             FOODTYPE.MEAT,
//             FOODTYPE.VEGGIE,
//             FOODTYPE.SEEDS,
//         },
//     },
// }

// CHARACTER_INGREDIENT =
// {
//     //NOTE: Value is used as key for NAME string and inventory image
//     HEALTH = "decrease_health",
//     MAX_HEALTH = "half_health",
//     SANITY = "decrease_sanity",
//     MAX_SANITY = "half_sanity",
// }

// //Character ingredient amounts must be multiples of 5
// CHARACTER_INGREDIENT_SEG = 5

// TECH_INGREDIENT =
// {
//     //NOTE: Value is used as key for NAME string and inventory image
//     //NOTE: Must be name of the tech + "_material"
//     SCULPTING = "sculpting_material",
// }

// // IngredientMod must be one of the following values
// INGREDIENT_MOD_LOOKUP =
// {
//     [0] = 0,
//     [1] = 0.25,
//     [2] = 0.5,
//     [3] = 0.75,
//     [4] = 1.0,
// }
// INGREDIENT_MOD = table.invert(INGREDIENT_MOD_LOOKUP)

// CONTAINERTEST =
// {
//     NONE = 0,
//     COOKING = 1,
//     PERISHABLE_FOOD = 2,
//     TELEPORTATO = 3,
// }

// TOOLACTIONS =
// {
//     CHOP = true,
//     DIG = true,
//     HAMMER = true,
//     MINE = true,
//     NET = true,
//     PLAY = true,
//     UNSADDLE = true,
// }

// DEPLOYMODE =
// {
//     NONE = 0,
//     DEFAULT = 1,
//     ANYWHERE = 2,
//     TURF = 3,
//     PLANT = 4,
//     WALL = 5,
// }

// DEPLOYSPACING =
// {
//     DEFAULT = 0,
//     MEDIUM = 1,
//     LESS = 2,
//     NONE = 3,
// }

// DEPLOYSPACING_RADIUS =
// {
//     [DEPLOYSPACING.DEFAULT] = 2,
//     [DEPLOYSPACING.MEDIUM] = 1,
//     [DEPLOYSPACING.LESS] = .75,
//     [DEPLOYSPACING.NONE] = 0,
// }

// DONT_STARVE_TOGETHER_APPID = 322330
// DONT_STARVE_APPID = 219740
// REIGN_OF_GIANTS_APPID = 282470

// // keeping this here in case someone wants to mod it in. It won't be a default part of the game (or even an option), but we've already done the work
// // and someone might be able to do something cool with it.
// HUMAN_MEAT_ENABLED = false

// SCREEN_FADE_TIME = .25
// BACK_BUTTON_X = 60
// BACK_BUTTON_Y = 60
// DOUBLE_CLICK_TIMEOUT = .5

// GOLD = {202/255, 174/255, 118/255, 255/255}
// GREY = {.57, .57, .57, 1}
// BLACK = {.1, .1, .1, 1}
// WHITE = {1, 1, 1, 1}
// BROWN = {97/255, 73/255, 46/255, 255/255}
// RED = {.7, .1, .1, 1}
// DARKGREY = {.12, .12, .12, 1}

// MAX_CHAT_INPUT_LENGTH = 150
// MAX_WRITEABLE_LENGTH = 200

// //Bit flags, currently supports up to 8
// //Server may use these for things that clients need to know about
// //other clients whose player entities may or may not be available
// //e.g. Stuff that shows on the scoreboard
// USERFLAGS =
// {
//     IS_GHOST			= 1,
//     IS_AFK				= 2,
//     CHARACTER_STATE_1	= 4,
//     CHARACTER_STATE_2	= 8,
//     // = 16,
//     // = 32,
//     // = 64,
//     // = 128,
// }

// //Camera shake modes
// CAMERASHAKE =
// {
//     FULL = 0,
//     SIDE = 1,
//     VERTICAL = 2,
// }

// //Badge/meter arrow sizes
// RATE_SCALE =
// {
//     NEUTRAL = 0,
//     INCREASE_HIGH = 1,
//     INCREASE_MED = 2,
//     INCREASE_LOW = 3,
//     DECREASE_HIGH = 4,
//     DECREASE_MED = 5,
//     DECREASE_LOW = 6,
// }

// // Twitch status codes
// TWITCH = 
// {
//     UNDEFINED = -1,
//     CHAT_CONNECTED = 0,
//     CHAT_DISCONNECTED = 1,
//     CHAT_CONNECT_FAILED = 2,
// }

// // TeamAttacker orders
// ORDERS =
// {
//     NONE = 0,
//     HOLD = 1,
//     WARN = 2,
//     ATTACK = 3,
// }

// // How does this creature apply stunlock to the player
// PLAYERSTUNLOCK =
// {
//     ALWAYS = nil,//0,
//     OFTEN = 1,
//     SOMETIMES = 2,
//     RARELY = 3,
//     NEVER = 4,
// }

// // Which wormhole?
// WORMHOLETYPE =
// {
//     WORM = 0,
//     TENTAPILLAR = 1,
// }

// // Domestication tendencies
// TENDENCY =
// {
//     DEFAULT = "DEFAULT",
//     ORNERY = "ORNERY",
//     RIDER = "RIDER",
//     PUDGY = "PUDGY",
// }

// REMOTESHARDSTATE =
// {
//     OFFLINE = 0,
//     READY = 1,
// }

// SHARDID =
// {
//     INVALID = "0",
//     MASTER = "1"
// }

// // Server pricacy options
// PRIVACY_TYPE =
// {
//     PUBLIC = 0,
//     FRIENDS = 1,
//     LOCAL = 2,
//     CLAN = 3,
// }

// INTENTIONS =
// {
//     SOCIAL = "social",
//     COOPERATIVE = "cooperative",
//     COMPETITIVE = "competitive",
//     MADNESS = "madness",
//     ANY = "any", // for player use only, servers must have an intention
// }

// LEVELTYPE = {
//     SURVIVAL = "SURVIVAL",
//     CAVE = "CAVE",
//     ADVENTURE = "ADVENTURE",
//     TEST = "TEST",
//     UNKNOWN = "UNKNOWN",
//     CUSTOM = "CUSTOM",
// }

// COMMAND_PERMISSION = {
//     ADMIN = "ADMIN", // only admins see and can activate
//     MODERATOR = "MODERATOR", // only admins and mods can see and activate
//     USER = "USER", // anyone can see and do instantly. Mostly for local commands, or if a mod wants to offer accessible functionality
// }

// COMMAND_RESULT = {
//     ALLOW = "ALLOW",
//     DISABLED = "DISABLED", //cannot run it right now (not related to voting)
//     VOTE = "VOTE",
//     DENY = "DENY", //cannot start vote right now
//     INVALID = "INVALID",
// }


// CURRENT_BETA = 0 // set to 0 if there is no beta. Note: release builds wont use this so only staging and dev really care
// BETA_INFO =
// {
//     {	
// 		NAME = "ANRBETA",
// 		SERVERTAG = "a_new_reign_beta",
// 		VERSION_MISMATCH_STRING = "VERSION_MISMATCH_ARNBETA",
// 		URL = "http://forums.kleientertainment.com/topic/69487-how-to-opt-in-to-a-new-reign-beta-for-dont-starve-together/",
// 	},
	
// 	// THE GENERIC PUBLIC BETA INFO MUST BE LAST //
// 	// This is added to all beta servers as a fallback
// 	{
// 		NAME = "PUBLIC_BETA",
// 		SERVERTAG = "public_beta",
// 		VERSION_MISMATCH_STRING = "VERSION_MISMATCH_PUBLIC_BETA",
// 		URL = "http://forums.kleientertainment.com/forum/66-dont-starve-together-general-discussion/",
// 	},
// }
// PUBLIC_BETA = #BETA_INFO

// }