package dst;

import haxe.Constraints.Function;
import haxe.extern.Rest;
import haxe.ds.StringMap;

 /**
  * data/scripts/debugprint.lua
	*
  * Overrides Lua print() with custom PrintLogger chain
	* which includes:
	* - output to interactive in-game console
	* - output to disk in client_log.txt
	* - optional prefixed lua file name + line no
  */
@:native("_G")
extern class DebugPrint
{
	/**
	 * Determines whether references to source files and line numbers
	 * are printed with log entries generated by this namespace.
	 */
	static public var PRINT_SOURCE(default, never): Bool; // false

	/**
	 * Append your function to the chainable log handler pipeline.
	 */
	static public function addPrintLogger(fn:Function): Void;

	/**
	 * Holds a list of match,replace key,value pairs.
	 * Really only meant to be used by the following function.
	 */
	static private var matches: StringMap<String>;

	/**
	 * Escape Lua special characters.
	 */
	static public function escape_lua_pattern(s:String): String;

	/**
	 * @returns argument list joined into a tab-separated string.
	 */
	static public function packstring(args:Rest<String>): String;

	/**
	 * Overrides the normal global Lua print() method.
	 * This version forwards its arguments to each function
	 * callback in the chain of PrintLoggers added so far.
	 *
	 * When PRINT_SOURCE is true, calls to print() will also
	 * include the lua file name and line number that invoked it.
	 *
	 * You won't need to reference this function directly.
	 */
	static private function print(args:Rest<String>): Void;

	/**
	 * This function is identical to print() above, but
	 * will never prefix lua file name and line numbers
	 * even when PRINT_SOURCE is true.
	 *
	 * Used by the interactive console.
	 */
	static public function nolineprint(args:Rest<String>): Void;

	/**
	 * Get last 20 lines of output print() to interactive console.
	 */
	static public function GetConsoleOutputList(): Array<String>;
}